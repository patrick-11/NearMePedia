{"ast":null,"code":"import*as React from'react';import useNavigation from\"./useNavigation\";export default function useFocusEffect(callback){var navigation=useNavigation();React.useEffect(function(){var isFocused=false;var cleanup;if(navigation.isFocused()){cleanup=callback();isFocused=true;}var unsubscribeFocus=navigation.addListener('focus',function(){if(isFocused){return;}if(cleanup!==undefined){cleanup();}cleanup=callback();isFocused=true;});var unsubscribeBlur=navigation.addListener('blur',function(){if(cleanup!==undefined){cleanup();}cleanup=undefined;isFocused=false;});return function(){if(cleanup!==undefined){cleanup();}unsubscribeFocus();unsubscribeBlur();};},[callback,navigation]);}","map":{"version":3,"sources":["useFocusEffect.tsx"],"names":["navigation","useNavigation","React","isFocused","cleanup","callback","unsubscribeFocus","unsubscribeBlur"],"mappings":"AAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,CACA,MAAA,CAAA,aAAA,uBAWA,cAAe,SAAA,CAAA,cAAA,CAAA,QAAA,CAAkD,CAC/D,GAAMA,CAAAA,UAAU,CAAGC,aAAnB,EAAA,CAEAC,KAAK,CAALA,SAAAA,CAAgB,UAAM,CACpB,GAAIC,CAAAA,SAAS,CAAb,KAAA,CACA,GAFoB,CAAA,OAEpB,CAGA,GAAIH,UAAU,CAAd,SAAIA,EAAJ,CAA4B,CAC1BI,OAAO,CAAGC,QAAVD,EAAAA,CACAD,SAAS,CAATA,IAAAA,CACD,CAED,GAAMG,CAAAA,gBAAgB,CAAG,UAAU,CAAV,WAAA,CAAA,OAAA,CAAgC,UAAM,CAG7D,GAAA,SAAA,CAAe,CACb,OACD,CAED,GAAIF,OAAO,GAAX,SAAA,CAA2B,CACzBA,OAAO,GACR,CAEDA,OAAO,CAAGC,QAAVD,EAAAA,CACAD,SAAS,CAATA,IAAAA,CAZF,CAAyB,CAAzB,CAeA,GAAMI,CAAAA,eAAe,CAAG,UAAU,CAAV,WAAA,CAAA,MAAA,CAA+B,UAAM,CAC3D,GAAIH,OAAO,GAAX,SAAA,CAA2B,CACzBA,OAAO,GACR,CAEDA,OAAO,CAAPA,SAAAA,CACAD,SAAS,CAATA,KAAAA,CANF,CAAwB,CAAxB,CASA,MAAO,WAAM,CACX,GAAIC,OAAO,GAAX,SAAA,CAA2B,CACzBA,OAAO,GACR,CAEDE,gBAAgB,GAChBC,eAAe,GANjB,CAAA,CAlCFL,CAAAA,CA0CG,CAAA,QAAA,CA1CHA,UA0CG,CA1CHA,EA2CD","sourcesContent":["import * as React from 'react';\nimport useNavigation from './useNavigation';\n\ntype EffectCallback = () => undefined | void | (() => void);\n\n/**\n * Hook to run an effect in a focused screen, similar to `React.useEffect`.\n * This can be used to perform side-effects such as fetching data or subscribing to events.\n * The passed callback should be wrapped in `React.useCallback` to avoid running the effect too often.\n *\n * @param callback Memoized callback containing the effect, should optionally return a cleanup function.\n */\nexport default function useFocusEffect(callback: EffectCallback) {\n  const navigation = useNavigation();\n\n  React.useEffect(() => {\n    let isFocused = false;\n    let cleanup: undefined | void | (() => void);\n\n    // We need to run the effect on intial render/dep changes if the screen is focused\n    if (navigation.isFocused()) {\n      cleanup = callback();\n      isFocused = true;\n    }\n\n    const unsubscribeFocus = navigation.addListener('focus', () => {\n      // If callback was already called for focus, avoid calling it again\n      // The focus event may also fire on intial render, so we guard against runing the effect twice\n      if (isFocused) {\n        return;\n      }\n\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = callback();\n      isFocused = true;\n    });\n\n    const unsubscribeBlur = navigation.addListener('blur', () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = undefined;\n      isFocused = false;\n    });\n\n    return () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [callback, navigation]);\n}\n"]},"metadata":{},"sourceType":"module"}