{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}import*as React from'react';import{CommonActions}from'@react-navigation/routers';import EnsureSingleNavigator from\"./EnsureSingleNavigator\";import NavigationBuilderContext from\"./NavigationBuilderContext\";import useFocusedListeners from\"./useFocusedListeners\";import useDevTools from\"./useDevTools\";import useStateGetters from\"./useStateGetters\";import isSerializable from\"./isSerializable\";import useEventEmitter from\"./useEventEmitter\";var MISSING_CONTEXT_ERROR=\"We couldn't find a navigation context. Have you wrapped your app with 'NavigationContainer'? See https://reactnavigation.org/docs/en/getting-started.html for setup instructions.\";export var NavigationStateContext=React.createContext({isDefault:true,get getKey(){throw new Error(MISSING_CONTEXT_ERROR);},get setKey(){throw new Error(MISSING_CONTEXT_ERROR);},get getState(){throw new Error(MISSING_CONTEXT_ERROR);},get setState(){throw new Error(MISSING_CONTEXT_ERROR);},get performTransaction(){throw new Error(MISSING_CONTEXT_ERROR);}});var hasWarnedForSerialization=false;var getPartialState=function getPartialState(state){if(state===undefined){return;}var key=state.key,routeNames=state.routeNames,partialState=_objectWithoutProperties(state,[\"key\",\"routeNames\"]);return _objectSpread({},partialState,{stale:true,routes:state.routes.map(function(route){if(route.state===undefined){return route;}return _objectSpread({},route,{state:getPartialState(route.state)});})});};var BaseNavigationContainer=React.forwardRef(function BaseNavigationContainer(_ref,ref){var initialState=_ref.initialState,onStateChange=_ref.onStateChange,independent=_ref.independent,children=_ref.children;var parent=React.useContext(NavigationStateContext);if(!parent.isDefault&&!independent){throw new Error(\"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitely. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\");}var _React$useState=React.useState(function(){return getPartialState(initialState==null?undefined:initialState);}),_React$useState2=_slicedToArray(_React$useState,2),state=_React$useState2[0],setNavigationState=_React$useState2[1];var navigationStateRef=React.useRef();var transactionStateRef=React.useRef(null);var isTransactionActiveRef=React.useRef(false);var isFirstMountRef=React.useRef(true);var skipTrackingRef=React.useRef(false);var navigatorKeyRef=React.useRef();var getKey=React.useCallback(function(){return navigatorKeyRef.current;},[]);var setKey=React.useCallback(function(key){navigatorKeyRef.current=key;},[]);var performTransaction=React.useCallback(function(callback){if(isTransactionActiveRef.current){throw new Error(\"Only one transaction can be active at a time. Did you accidentally nest 'performTransaction'?\");}setNavigationState(function(navigationState){isTransactionActiveRef.current=true;transactionStateRef.current=navigationState;try{callback();}finally{isTransactionActiveRef.current=false;}return transactionStateRef.current;});},[]);var getState=React.useCallback(function(){return transactionStateRef.current!==null?transactionStateRef.current:navigationStateRef.current;},[]);var setState=React.useCallback(function(navigationState){if(transactionStateRef.current===null){throw new Error(\"Any 'setState' calls need to be done inside 'performTransaction'\");}transactionStateRef.current=navigationState;},[]);var reset=React.useCallback(function(state){performTransaction(function(){skipTrackingRef.current=true;setState(state);});},[performTransaction,setState]);var _useDevTools=useDevTools({name:'@react-navigation',reset:reset,state:state}),trackState=_useDevTools.trackState,trackAction=_useDevTools.trackAction;var _useFocusedListeners=useFocusedListeners(),listeners=_useFocusedListeners.listeners,addFocusedListener=_useFocusedListeners.addListener;var _useStateGetters=useStateGetters(),getStateForRoute=_useStateGetters.getStateForRoute,addStateGetter=_useStateGetters.addStateGetter;var dispatch=function dispatch(action){listeners[0](function(navigation){return navigation.dispatch(action);});};var canGoBack=function canGoBack(){var _listeners$=listeners[0](function(navigation){return navigation.canGoBack();}),result=_listeners$.result,handled=_listeners$.handled;if(handled){return result;}else{return false;}};var resetRoot=React.useCallback(function(state){performTransaction(function(){trackAction('@@RESET_ROOT');setState(state);});},[performTransaction,setState,trackAction]);var getRootState=React.useCallback(function(){return getStateForRoute('root');},[getStateForRoute]);var emitter=useEventEmitter();React.useImperativeHandle(ref,function(){return _objectSpread({},Object.keys(CommonActions).reduce(function(acc,name){acc[name]=function(){return dispatch(CommonActions[name].apply(CommonActions,arguments));};return acc;},{}),{},emitter.create('root'),{resetRoot:resetRoot,dispatch:dispatch,canGoBack:canGoBack,getRootState:getRootState});});var builderContext=React.useMemo(function(){return{addFocusedListener:addFocusedListener,addStateGetter:addStateGetter,trackAction:trackAction};},[addFocusedListener,trackAction,addStateGetter]);var context=React.useMemo(function(){return{state:state,performTransaction:performTransaction,getState:getState,setState:setState,getKey:getKey,setKey:setKey};},[getKey,getState,performTransaction,setKey,setState,state]);React.useEffect(function(){if(process.env.NODE_ENV!=='production'){if(state!==undefined&&!isSerializable(state)&&!hasWarnedForSerialization){hasWarnedForSerialization=true;console.warn(\"We found non-serializable values in the navigation state, which can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/en/header-buttons.html#header-interaction-with-its-screen-component for docs.\");}}emitter.emit({type:'state',data:{state:state}});if(skipTrackingRef.current){skipTrackingRef.current=false;}else{trackState(getRootState);}navigationStateRef.current=state;transactionStateRef.current=null;if(!isFirstMountRef.current&&onStateChange){onStateChange(getRootState());}isFirstMountRef.current=false;},[state,onStateChange,trackState,getRootState,emitter]);return React.createElement(NavigationBuilderContext.Provider,{value:builderContext},React.createElement(NavigationStateContext.Provider,{value:context},React.createElement(EnsureSingleNavigator,null,children)));});export default BaseNavigationContainer;","map":{"version":3,"sources":["BaseNavigationContainer.tsx"],"names":["MISSING_CONTEXT_ERROR","NavigationStateContext","isDefault","hasWarnedForSerialization","getPartialState","state","routeNames","stale","routes","route","BaseNavigationContainer","children","parent","React","initialState","navigationStateRef","transactionStateRef","isTransactionActiveRef","isFirstMountRef","skipTrackingRef","navigatorKeyRef","getKey","setKey","key","performTransaction","callback","setNavigationState","navigationState","getState","setState","reset","trackAction","useDevTools","name","addListener","addFocusedListener","useFocusedListeners","addStateGetter","useStateGetters","dispatch","action","listeners","navigation","canGoBack","handled","resetRoot","getRootState","getStateForRoute","emitter","useEventEmitter","Object","acc","builderContext","context","process","isSerializable","console","type","data","trackState","onStateChange"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  Route,\n  NavigationState,\n  InitialState,\n  PartialState,\n  NavigationAction,\n} from '@react-navigation/routers';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport useFocusedListeners from './useFocusedListeners';\nimport useDevTools from './useDevTools';\nimport useStateGetters from './useStateGetters';\nimport isSerializable from './isSerializable';\n\nimport { NavigationContainerRef, NavigationContainerProps } from './types';\nimport useEventEmitter from './useEventEmitter';\n\ntype State = NavigationState | PartialState<NavigationState> | undefined;\n\nconst MISSING_CONTEXT_ERROR =\n  \"We couldn't find a navigation context. Have you wrapped your app with 'NavigationContainer'? See https://reactnavigation.org/docs/en/getting-started.html for setup instructions.\";\n\nexport const NavigationStateContext = React.createContext<{\n  isDefault?: true;\n  state?: NavigationState | PartialState<NavigationState>;\n  getKey: () => string | undefined;\n  setKey: (key: string) => void;\n  getState: () => NavigationState | PartialState<NavigationState> | undefined;\n  setState: (\n    state: NavigationState | PartialState<NavigationState> | undefined\n  ) => void;\n  performTransaction: (action: () => void) => void;\n}>({\n  isDefault: true,\n\n  get getKey(): any {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n  get setKey(): any {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n  get getState(): any {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n  get setState(): any {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n  get performTransaction(): any {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n});\n\nlet hasWarnedForSerialization = false;\n\n/**\n * Remove `key` and `routeNames` from the state objects recursively to get partial state.\n *\n * @param state Initial state object.\n */\nconst getPartialState = (\n  state: InitialState | undefined\n): PartialState<NavigationState> | undefined => {\n  if (state === undefined) {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { key, routeNames, ...partialState } = state;\n\n  // @ts-ignore\n  return {\n    ...partialState,\n    stale: true,\n    routes: state.routes.map(route => {\n      if (route.state === undefined) {\n        return route as Route<string> & {\n          state?: PartialState<NavigationState>;\n        };\n      }\n\n      return { ...route, state: getPartialState(route.state) };\n    }),\n  };\n};\n\n/**\n * Container component which holds the navigation state.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nconst BaseNavigationContainer = React.forwardRef(\n  function BaseNavigationContainer(\n    {\n      initialState,\n      onStateChange,\n      independent,\n      children,\n    }: NavigationContainerProps,\n    ref: React.Ref<NavigationContainerRef>\n  ) {\n    const parent = React.useContext(NavigationStateContext);\n\n    if (!parent.isDefault && !independent) {\n      throw new Error(\n        \"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitely. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\"\n      );\n    }\n\n    const [state, setNavigationState] = React.useState<State>(() =>\n      getPartialState(initialState == null ? undefined : initialState)\n    );\n\n    const navigationStateRef = React.useRef<State>();\n    const transactionStateRef = React.useRef<State | null>(null);\n    const isTransactionActiveRef = React.useRef<boolean>(false);\n    const isFirstMountRef = React.useRef<boolean>(true);\n    const skipTrackingRef = React.useRef<boolean>(false);\n\n    const navigatorKeyRef = React.useRef<string | undefined>();\n\n    const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n    const setKey = React.useCallback((key: string) => {\n      navigatorKeyRef.current = key;\n    }, []);\n\n    const performTransaction = React.useCallback((callback: () => void) => {\n      if (isTransactionActiveRef.current) {\n        throw new Error(\n          \"Only one transaction can be active at a time. Did you accidentally nest 'performTransaction'?\"\n        );\n      }\n\n      setNavigationState((navigationState: State) => {\n        isTransactionActiveRef.current = true;\n        transactionStateRef.current = navigationState;\n\n        try {\n          callback();\n        } finally {\n          isTransactionActiveRef.current = false;\n        }\n\n        return transactionStateRef.current;\n      });\n    }, []);\n\n    const getState = React.useCallback(\n      () =>\n        transactionStateRef.current !== null\n          ? transactionStateRef.current\n          : navigationStateRef.current,\n      []\n    );\n\n    const setState = React.useCallback((navigationState: State) => {\n      if (transactionStateRef.current === null) {\n        throw new Error(\n          \"Any 'setState' calls need to be done inside 'performTransaction'\"\n        );\n      }\n\n      transactionStateRef.current = navigationState;\n    }, []);\n\n    const reset = React.useCallback(\n      (state: NavigationState) => {\n        performTransaction(() => {\n          skipTrackingRef.current = true;\n          setState(state);\n        });\n      },\n      [performTransaction, setState]\n    );\n\n    const { trackState, trackAction } = useDevTools({\n      name: '@react-navigation',\n      reset,\n      state,\n    });\n\n    const {\n      listeners,\n      addListener: addFocusedListener,\n    } = useFocusedListeners();\n\n    const { getStateForRoute, addStateGetter } = useStateGetters();\n\n    const dispatch = (\n      action: NavigationAction | ((state: NavigationState) => NavigationAction)\n    ) => {\n      listeners[0](navigation => navigation.dispatch(action));\n    };\n\n    const canGoBack = () => {\n      const { result, handled } = listeners[0](navigation =>\n        navigation.canGoBack()\n      );\n\n      if (handled) {\n        return result;\n      } else {\n        return false;\n      }\n    };\n\n    const resetRoot = React.useCallback(\n      (state?: PartialState<NavigationState> | NavigationState) => {\n        performTransaction(() => {\n          trackAction('@@RESET_ROOT');\n          setState(state);\n        });\n      },\n      [performTransaction, setState, trackAction]\n    );\n\n    const getRootState = React.useCallback(() => {\n      return getStateForRoute('root');\n    }, [getStateForRoute]);\n\n    const emitter = useEventEmitter();\n\n    React.useImperativeHandle(ref, () => ({\n      ...(Object.keys(CommonActions) as (keyof typeof CommonActions)[]).reduce<\n        any\n      >((acc, name) => {\n        acc[name] = (...args: any[]) =>\n          dispatch(\n            CommonActions[name](\n              // @ts-ignore\n              ...args\n            )\n          );\n        return acc;\n      }, {}),\n      ...emitter.create('root'),\n      resetRoot,\n      dispatch,\n      canGoBack,\n      getRootState,\n    }));\n\n    const builderContext = React.useMemo(\n      () => ({\n        addFocusedListener,\n        addStateGetter,\n        trackAction,\n      }),\n      [addFocusedListener, trackAction, addStateGetter]\n    );\n\n    const context = React.useMemo(\n      () => ({\n        state,\n        performTransaction,\n        getState,\n        setState,\n        getKey,\n        setKey,\n      }),\n      [getKey, getState, performTransaction, setKey, setState, state]\n    );\n\n    React.useEffect(() => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (\n          state !== undefined &&\n          !isSerializable(state) &&\n          !hasWarnedForSerialization\n        ) {\n          hasWarnedForSerialization = true;\n\n          console.warn(\n            \"We found non-serializable values in the navigation state, which can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/en/header-buttons.html#header-interaction-with-its-screen-component for docs.\"\n          );\n        }\n      }\n\n      emitter.emit({\n        type: 'state',\n        data: { state },\n      });\n\n      if (skipTrackingRef.current) {\n        skipTrackingRef.current = false;\n      } else {\n        trackState(getRootState);\n      }\n\n      navigationStateRef.current = state;\n      transactionStateRef.current = null;\n\n      if (!isFirstMountRef.current && onStateChange) {\n        onStateChange(getRootState());\n      }\n\n      isFirstMountRef.current = false;\n    }, [state, onStateChange, trackState, getRootState, emitter]);\n\n    return (\n      <NavigationBuilderContext.Provider value={builderContext}>\n        <NavigationStateContext.Provider value={context}>\n          <EnsureSingleNavigator>{children}</EnsureSingleNavigator>\n        </NavigationStateContext.Provider>\n      </NavigationBuilderContext.Provider>\n    );\n  }\n);\n\nexport default BaseNavigationContainer;\n"]},"metadata":{},"sourceType":"module"}