{"ast":null,"code":"function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}export default function getActionFromState(state){var payload;if(state.routes.length===1){var route=state.routes[0];payload={name:route.name,params:_objectSpread({},route.params)};var current=state.routes[0].state;var params=payload.params;while(current){if(current.routes.length===1){route=current.routes[0];params.screen=route.name;if(route.state){params.params=_objectSpread({},route.params);params=params.params;}else{params.params=route.params;}current=route.state;}else{payload=undefined;break;}}}if(payload){return{type:'NAVIGATE',payload:payload};}return{type:'RESET_ROOT',payload:state};}","map":{"version":3,"sources":["getActionFromState.tsx"],"names":["state","route","payload","name","params","current","type"],"mappings":"k9BAiBA,cAAe,SAAA,CAAA,kBAAA,CAAA,KAAA,CAEL,CACR,GAAA,CAAA,OAAA,CAEA,GAAIA,KAAK,CAALA,MAAAA,CAAAA,MAAAA,GAAJ,CAAA,CAA+B,CAG7B,GAAIC,CAAAA,KAAK,CAAGD,KAAK,CAALA,MAAAA,CAAZ,CAAYA,CAAZ,CAEAE,OAAO,CAAG,CACRC,IAAI,CAAEF,KAAK,CADH,IAAA,CAERG,MAAM,CAAA,aAAA,CAAA,EAAA,CAAOH,KAAK,CAAZ,MAAA,CAFE,CAAVC,CAKA,GAAIG,CAAAA,OAAO,CAAGL,KAAK,CAALA,MAAAA,CAAAA,CAAAA,EAAd,KAAA,CACA,GAAII,CAAAA,MAAM,CAAGF,OAAO,CAApB,MAAA,CAEA,MAAA,OAAA,CAAgB,CACd,GAAIG,OAAO,CAAPA,MAAAA,CAAAA,MAAAA,GAAJ,CAAA,CAAiC,CAC/BJ,KAAK,CAAGI,OAAO,CAAPA,MAAAA,CAARJ,CAAQI,CAARJ,CACAG,MAAM,CAANA,MAAAA,CAAgBH,KAAK,CAArBG,IAAAA,CAEA,GAAIH,KAAK,CAAT,KAAA,CAAiB,CACfG,MAAM,CAANA,MAAAA,CAAAA,aAAAA,CAAAA,EAAAA,CAAqBH,KAAK,CAA1BG,MAAAA,CAAAA,CACAA,MAAM,CAAGA,MAAM,CAAfA,MAAAA,CAFF,CAAA,IAGO,CACLA,MAAM,CAANA,MAAAA,CAAgBH,KAAK,CAArBG,MAAAA,CACD,CAEDC,OAAO,CAAGJ,KAAK,CAAfI,KAAAA,CAXF,CAAA,IAYO,CACLH,OAAO,CAAPA,SAAAA,CACA,MACD,CACF,CACF,CAED,GAAA,OAAA,CAAa,CACX,MAAO,CACLI,IAAI,CADC,UAAA,CAELJ,OAAAA,CAAAA,OAFK,CAAP,CAID,CAED,MAAO,CACLI,IAAI,CADC,YAAA,CAELJ,OAAO,CAAEF,KAFJ,CAAP,CAID","sourcesContent":["import { PartialState, NavigationState } from '@react-navigation/routers';\n\ntype NavigateParams = {\n  screen?: string;\n  params?: NavigateParams;\n};\n\ntype Action =\n  | {\n      type: 'NAVIGATE';\n      payload: { name: string; params: NavigateParams };\n    }\n  | {\n      type: 'RESET_ROOT';\n      payload: PartialState<NavigationState>;\n    };\n\nexport default function getActionFromState(\n  state: PartialState<NavigationState>\n): Action {\n  let payload: { name: string; params: NavigateParams } | undefined;\n\n  if (state.routes.length === 1) {\n    // Try to construct payload for a `NAVIGATE` action from the state\n    // This lets us preserve the navigation state and not lose it\n    let route = state.routes[0];\n\n    payload = {\n      name: route.name,\n      params: { ...route.params },\n    };\n\n    let current = state.routes[0].state;\n    let params = payload.params;\n\n    while (current) {\n      if (current.routes.length === 1) {\n        route = current.routes[0];\n        params.screen = route.name;\n\n        if (route.state) {\n          params.params = { ...route.params };\n          params = params.params;\n        } else {\n          params.params = route.params;\n        }\n\n        current = route.state;\n      } else {\n        payload = undefined;\n        break;\n      }\n    }\n  }\n\n  if (payload) {\n    return {\n      type: 'NAVIGATE',\n      payload,\n    };\n  }\n\n  return {\n    type: 'RESET_ROOT',\n    payload: state,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}